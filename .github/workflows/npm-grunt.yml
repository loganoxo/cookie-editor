name: grunt ESLint

on:
    push:
        branches: [ "master" ]
    pull_request:
        branches: [ "master" ]

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [ 18.x ]

        steps:
            -   uses: actions/checkout@v3

            -   name: Cache node modules
                id: cache-npm
                uses: actions/cache@v3
                env:
                    cache-name: cache-node-modules
                with:
                    # npm cache files are stored in `~/.npm` on Linux/macOS
                    path: ~/.npm
                    key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.os }}-build-${{ env.cache-name }}-
                        ${{ runner.os }}-build-
                        ${{ runner.os }}-

            -   if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
                name: List the state of node modules
                continue-on-error: true
                run: npm list

            -   name: Use Node.js ${{ matrix.node-version }}
                uses: actions/setup-node@v3
                with:
                    node-version: ${{ matrix.node-version }}

            -   name: Install dependencies
                run: npm install
            # Step 5: Run grunt to build the project
            -   name: Build Project
                run: grunt

            # Step 6: Verify the dist directory is created
            -   name: Verify Build Output
                run: ls -l dist

            # Step 7: Create GitHub Release
            -   name: Create GitHub Release
                id: create_release
                uses: actions/create-release@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    tag_name: v${{ github.run_number }}
                    release_name: "Release v${{ github.run_number }}"
                    body: |
                        Automated build and release of project.
                    draft: false
                    prerelease: false

            # Step 8: Upload dist directory to Release
            -   name: Upload Build Files to Release
                uses: actions/upload-release-asset@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    upload_url: ${{ steps.create_release.outputs.upload_url }}
                    asset_path: ./dist
                    asset_name: dist.zip
                    asset_content_type: application/zip
